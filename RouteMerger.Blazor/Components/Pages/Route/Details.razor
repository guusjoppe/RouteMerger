@page "/Route/Details/{id:guid}"
@using RouteMerger.Blazor.Mappers
@using RouteMerger.Blazor.Models
@using RouteMerger.Domain.Services
@using RouteMerger.Blazor.Components.Pages.Map
@using RouteMerger.Infrastructure.Enums
@inject RouteService RouteService
@inject FileReferenceService FileReferenceService
@inject NavigationManager NavigationManager

<h3>Route</h3>

@if (_route == null)
{
    <p>Loading route...</p>
}
else
{
    <h2>@_route.Name</h2>
    <p>Last Modified: @_route.LastModifiedAt.ToLocalTime().ToString("g")</p>
    <p>Number of files: @_route.FileReferences.Count</p>
    <p>
        <a href="@($"/Route/Edit/{_route.Id}")">Edit</a>
        <button class="btn btn-danger" @onclick="DeleteAsync">Delete</button>
        <button class="btn btn-secondary" @onclick="NavigateBack">Back</button>
    </p>
    if (_route?.MergedRoute == null && !_isLoadingMergedRoute)
    {
        <p>
            This route has not been merged yet.
        </p>
        <div class="alert alert-info" role="alert">
            <strong>Note:</strong> Merging routes may take a while depending on the number of files.
        </div>
        <button class="btn btn-primary" @onclick="MergeRoutesAsync">Merge Routes</button>
        if (_isLoading)
        {
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @($"{_progressPercent:F0}%");" 
                     aria-valuenow="@_progressPercent" aria-valuemin="0" aria-valuemax="100">
                    @($"{_progressPercent:F0}%")
                </div>
            </div>
        }
    }
    else
    {
        <OpenStreetMap GpxXmlString="@_mergedGpxString"></OpenStreetMap>
    }
}

@code {
    [Parameter] 
    public Guid Id { get; set; }
    
    private Route? _route;

    private string _mergedGpxString = string.Empty;
    
    private bool _isLoading;
    private bool _isLoadingMergedRoute;
    private decimal _progressPercent;

    protected override async Task OnInitializedAsync()
    {
        var domainRoute = await RouteService.GetAsync(Id);
        
        _route = domainRoute.ToModel();
        
        if (_route.MergedRoute != null)
        {
            _isLoadingMergedRoute = true;
            var gpxStream = await FileReferenceService.GetFileStreamsAsync(_route.MergedRoute.Id, FileDirectory.Merged);
            await SetMergedGpxStringAsync(gpxStream);
            _isLoadingMergedRoute = false;
        }
    }

    private async Task MergeRoutesAsync()
    {
        _isLoading = true;
        if (_route != null)
        {
            var mergedRouteReference = await RouteService.MergeRoutesAsync(_route.Id,
                progress =>
            {
                _progressPercent = progress;
                InvokeAsync(StateHasChanged);
            });
            var gpxStream = await FileReferenceService.GetFileStreamsAsync(mergedRouteReference.Id, FileDirectory.Merged);
            await SetMergedGpxStringAsync(gpxStream);
            _route.MergedRoute = mergedRouteReference.ToModel();
        }
        
        _isLoading = false;
    }
    
    private async Task SetMergedGpxStringAsync(Stream gpxStream)
    {
        using var reader = new StreamReader(gpxStream);
        var gpxXmlString = await reader.ReadToEndAsync();
        _mergedGpxString = gpxXmlString;
        await InvokeAsync(StateHasChanged);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/Route/Index");
    }
    
    private async Task DeleteAsync()
    {
        if (_route != null)
        {
            await RouteService.DeleteAsync(Id);
            NavigationManager.NavigateTo("/Route/Index");
        }
    }
}