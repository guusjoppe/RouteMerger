@inject IJSRuntime JsRuntime

<div id="map" style="height: 500px; width: 100%;"></div>

@code {
    [Parameter] 
    public required string GpxXmlString { get; set; }
    
    private DotNetObjectReference<OpenStreetMap>? _dotNetRef;
    
    private const double DefaultLatitude = 51.9280631;
    private const double DefaultLongitude = 4.4082564;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            
            var latitude = DefaultLatitude;
            var longitude = DefaultLongitude;
            
            try
            {
                // Get user's location
                var position = await JsRuntime.InvokeAsync<GeolocationCoordinates>("openStreetMap.getUserLocation");
                latitude = position.Latitude;
                longitude = position.Longitude;
            }
            catch (Exception ex)
            {
                // Handle error (e.g., user denied location access)
                Console.WriteLine($"Error getting user location: {ex.Message}");
            }
            
            await JsRuntime.InvokeVoidAsync("openStreetMap.initMap", "map", latitude, longitude);
            
            // Add GPX layers if provided
            if (GpxXmlString != string.Empty)
            {
                await JsRuntime.InvokeVoidAsync("openStreetMap.addGpxLayer", GpxXmlString);
            }
        }
    }

    public ValueTask DisposeAsync()
    {
        _dotNetRef?.Dispose();

        return ValueTask.CompletedTask;
    }
    
    private class GeolocationPosition
    {
        public GeolocationCoordinates Coords { get; set; } = default!;
    }

    private class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}